buildscript {
	ext {
		springBootVersion = '1.5.2.RELEASE'
	}
	repositories {
		mavenCentral()
		maven { url 'http://dl.bintray.com/vermeulen-mp/gradle-plugins' }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
//		classpath 'au.com.dius:pact-jvm-provider-gradle_2.11:3.2.4'
//		classpath 'com.wiredforcode:gradle-spawn-plugin:0.6.0'
	}
}


apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
//apply plugin: 'au.com.dius.pact'
//apply plugin: 'com.wiredforcode.spawn'


jar{
	baseName = 'event-service'
	version = '0.0.1'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/milestone" }
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')

	compile('org.springframework.data:spring-data-rest-hal-browser')
	compile('org.springframework.boot:spring-boot-starter-data-rest')		//contain starter-web
	compile('org.springframework.boot:spring-boot-starter-data-mongodb')

	//配置信息客户端
	compile('org.springframework.cloud:spring-cloud-starter-config')
	compile('org.springframework.cloud:spring-cloud-starter-bus-amqp')      //注册到cnofig bus

	//注册服务客户端
	compile('org.springframework.cloud:spring-cloud-starter-eureka')
	//注册服负载均衡封装Ribbon的Feign
	compile('org.springframework.cloud:spring-cloud-starter-feign')

	//消费者驱动的契约测试（-pact）jvm-junit
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('au.com.dius:pact-jvm-provider-junit_2.11:3.2.4')

}


dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:Dalston.RC1"
	}
}


// 消费者驱动的契约测试，提供者（provider）


//pact {
//	serviceProviders {
//		eventProvider {
//			startProviderTask = 'startProvider'
//			terminateProviderTask = 'stopProvider'
//			hasPactWith('EventCompositeService') {
//				pactFile = file('target/pacts/EventCompositeService-EventService.json')
//			}
//		}
//	}
//}
//
//import com.wiredforcode.gradle.spawn.*
//
//
//task startServer(type: SpawnProcessTask) {
//	command "docker-compose up --build"
//	ready 'Started Application'
//}
//
//task startProvider(type: Exec, dependsOn: 'startServer') {
//	// commandLine "./db-seed/seed.sh"
//}
//
//task killBackgroundProcess(type: KillProcessTask)
//
//task stopProvider(type: Exec, dependsOn: 'killBackgroundProcess') {
//	// commandLine './scripts/stop.sh'
//}
//
//task copy(){
//
//}